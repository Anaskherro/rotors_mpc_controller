#!/usr/bin/env python3

"""Simple attitude-to-rotor-speed mapping for the NMPC output."""

from __future__ import annotations

from typing import Optional

import numpy as np
import rospy
from mav_msgs.msg import Actuators, RollPitchYawrateThrust
from nav_msgs.msg import Odometry

from rotors_mpc_controller import RotorMixer, load_params, quaternion_to_euler


class LowLevelControllerNode:
    def __init__(self) -> None:
        self._params = load_params()
        self._topics = self._params['topics']
        self._mixer = RotorMixer(self._params)

        self._command: Optional[dict] = None
        self._attitude: Optional[tuple] = None
        self._body_rates: Optional[np.ndarray] = None

        self._motor_pub = rospy.Publisher(self._topics['motor'], Actuators, queue_size=1)
        rospy.Subscriber(self._topics['command'], RollPitchYawrateThrust,
                         self._command_cb, queue_size=1)
        rospy.Subscriber(self._topics['state'], Odometry, self._odom_cb, queue_size=1)

    def _command_cb(self, msg: RollPitchYawrateThrust) -> None:
        self._command = {
            'roll': float(msg.roll),
            'pitch': float(msg.pitch),
            'yaw_rate': float(msg.yaw_rate),
            'thrust': float(msg.thrust.z),
        }

    def _odom_cb(self, msg: Odometry) -> None:
        roll, pitch, yaw = quaternion_to_euler(msg.pose.pose.orientation.x,
                                               msg.pose.pose.orientation.y,
                                               msg.pose.pose.orientation.z,
                                               msg.pose.pose.orientation.w)
        self._attitude = (roll, pitch, yaw)
        self._body_rates = np.array([msg.twist.twist.angular.x,
                                     msg.twist.twist.angular.y,
                                     msg.twist.twist.angular.z], dtype=float)
        self._maybe_publish(msg.header.stamp)

    def _maybe_publish(self, stamp: rospy.Time) -> None:
        if self._command is None or self._attitude is None or self._body_rates is None:
            return

        rotor_speeds = self._mixer.compute_motor_speeds(
            roll_cmd=self._command['roll'],
            pitch_cmd=self._command['pitch'],
            yaw_rate_cmd=self._command['yaw_rate'],
            thrust_cmd=self._command['thrust'],
            attitude=self._attitude,
            body_rates=tuple(self._body_rates),
        )

        msg = Actuators()
        msg.header.stamp = stamp if stamp != rospy.Time() else rospy.Time.now()
        msg.angular_velocities = rotor_speeds.tolist()
        self._motor_pub.publish(msg)


def main() -> None:
    rospy.init_node('low_level_controller_node')
    LowLevelControllerNode()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
