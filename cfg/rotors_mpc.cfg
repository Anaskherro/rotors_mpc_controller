#!/usr/bin/env python
PACKAGE = "rotors_mpc_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

solver = gen.add_group("Solver")
solver.add("solver_horizon_steps", int_t, 0, "Prediction horizon steps", 20, 1, 600)
solver.add("solver_dt", double_t, 0, "Discretization step", 0.05, 0.01, 0.2)
solver.add("solver_position_weight_x", double_t, 0, "Position weight x", 10.0, 0.0, 50.0)
solver.add("solver_position_weight_y", double_t, 0, "Position weight y", 10.0, 0.0, 50.0)
solver.add("solver_position_weight_z", double_t, 0, "Position weight z", 8.0, 0.0, 50.0)
solver.add("solver_velocity_weight_x", double_t, 0, "Velocity weight x", 1.0, 0.0, 10.0)
solver.add("solver_velocity_weight_y", double_t, 0, "Velocity weight y", 1.0, 0.0, 10.0)
solver.add("solver_velocity_weight_z", double_t, 0, "Velocity weight z", 0.2, 0.0, 10.0)
solver.add("solver_quat_weight_w", double_t, 0, "Quaternion weight w", 3.2, 0.0, 20.0)
solver.add("solver_quat_weight_x", double_t, 0, "Quaternion weight x", 3.2, 0.0, 20.0)
solver.add("solver_quat_weight_y", double_t, 0, "Quaternion weight y", 3.2, 0.0, 20.0)
solver.add("solver_quat_weight_z", double_t, 0, "Quaternion weight z", 3.2, 0.0, 20.0)
solver.add("solver_rate_weight_x", double_t, 0, "Body rate weight x", 1.4, 0.0, 20.0)
solver.add("solver_rate_weight_y", double_t, 0, "Body rate weight y", 1.4, 0.0, 20.0)
solver.add("solver_rate_weight_z", double_t, 0, "Body rate weight z", 0.4, 0.0, 20.0)
solver.add("solver_control_weight_f1", double_t, 0, "Rotor thrust weight f1", 1.75, 0.0, 5.0)
solver.add("solver_control_weight_f2", double_t, 0, "Rotor thrust weight f2", 1.75, 0.0, 5.0)
solver.add("solver_control_weight_f3", double_t, 0, "Rotor thrust weight f3", 1.75, 0.0, 5.0)
solver.add("solver_control_weight_f4", double_t, 0, "Rotor thrust weight f4", 1.75, 0.0, 5.0)
solver.add("solver_terminal_weight_px", double_t, 0, "Terminal weight position x", 5.0, 0.0, 50.0)
solver.add("solver_terminal_weight_py", double_t, 0, "Terminal weight position y", 5.0, 0.0, 50.0)
solver.add("solver_terminal_weight_pz", double_t, 0, "Terminal weight position z", 3.0, 0.0, 50.0)
solver.add("solver_terminal_weight_vx", double_t, 0, "Terminal weight velocity x", 2.0, 0.0, 20.0)
solver.add("solver_terminal_weight_vy", double_t, 0, "Terminal weight velocity y", 2.0, 0.0, 20.0)
solver.add("solver_terminal_weight_vz", double_t, 0, "Terminal weight velocity z", 2.0, 0.0, 20.0)
solver.add("solver_terminal_weight_qw", double_t, 0, "Terminal weight quaternion w", 12.0, 0.0, 50.0)
solver.add("solver_terminal_weight_qx", double_t, 0, "Terminal weight quaternion x", 12.0, 0.0, 50.0)
solver.add("solver_terminal_weight_qy", double_t, 0, "Terminal weight quaternion y", 12.0, 0.0, 50.0)
solver.add("solver_terminal_weight_qz", double_t, 0, "Terminal weight quaternion z", 10.5, 0.0, 50.0)
solver.add("solver_terminal_weight_wx", double_t, 0, "Terminal weight rate x", 2.0, 0.0, 20.0)
solver.add("solver_terminal_weight_wy", double_t, 0, "Terminal weight rate y", 2.0, 0.0, 20.0)
solver.add("solver_terminal_weight_wz", double_t, 0, "Terminal weight rate z", 1.8, 0.0, 20.0)
solver.add("solver_regularization", double_t, 0, "Levenberg-Marquardt regularization", 0.007, 1e-6, 0.1)
solver.add("solver_iter_max", int_t, 0, "QP solver iteration cap", 600, 1, 600)
solver.add("solver_codegen_directory", str_t, 0, "acados codegen directory", "~/.cache/rotors_mpc_controller/acados")

vehicle = gen.add_group("Vehicle")
vehicle.add("vehicle_mass", double_t, 0, "Vehicle mass", 0.68, 0.2, 5.0)
vehicle.add("vehicle_inertia_xx", double_t, 0, "Inertia xx", 0.0070, 0.0, 0.1)
vehicle.add("vehicle_inertia_xy", double_t, 0, "Inertia xy", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_xz", double_t, 0, "Inertia xz", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_yx", double_t, 0, "Inertia yx", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_yy", double_t, 0, "Inertia yy", 0.0070, 0.0, 0.1)
vehicle.add("vehicle_inertia_yz", double_t, 0, "Inertia yz", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_zx", double_t, 0, "Inertia zx", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_zy", double_t, 0, "Inertia zy", 0.0, -0.05, 0.05)
vehicle.add("vehicle_inertia_zz", double_t, 0, "Inertia zz", 0.0120, 0.0, 0.1)
vehicle.add("vehicle_arm_length", double_t, 0, "Arm length", 0.17, 0.05, 1.0)
vehicle.add("vehicle_rotor_force_constant", double_t, 0, "Rotor force constant", 8.54858e-06, 1e-07, 1e-04)
vehicle.add("vehicle_rotor_moment_constant", double_t, 0, "Rotor moment constant", 0.016, 1e-03, 0.1)
vehicle.add("vehicle_motor_min_speed", double_t, 0, "Motor min speed", 50.0, 0.0, 500.0)
vehicle.add("vehicle_motor_max_speed", double_t, 0, "Motor max speed", 838.0, 100.0, 2000.0)
vehicle.add("vehicle_drag_x", double_t, 0, "Drag coefficient X", 0.12, -0.5, 0.5)
vehicle.add("vehicle_drag_y", double_t, 0, "Drag coefficient Y", 0.12, -0.5, 0.5)
vehicle.add("vehicle_drag_z", double_t, 0, "Drag coefficient Z", 0.2, -0.5, 0.5)

controller = gen.add_group("Controller")
controller.add("controller_thrust_min", double_t, 0, "Thrust minimum", 4.0, 0.0, 20.0)
controller.add("controller_thrust_max", double_t, 0, "Thrust maximum", 20.0, 0.0, 40.0)

world = gen.add_group("World")
world.add("world_gravity", double_t, 0, "Gravity", 9.81, 5.0, 15.0)

reference = gen.add_group("Reference")
reference.add("reference_frame", str_t, 0, "Reference frame", "world")
reference.add("reference_position_x", double_t, 0, "Reference position X", 0.0, -10.0, 10.0)
reference.add("reference_position_y", double_t, 0, "Reference position Y", 0.0, -10.0, 10.0)
reference.add("reference_position_z", double_t, 0, "Reference position Z", 1.0, 0.0, 10.0)
reference.add("reference_velocity_x", double_t, 0, "Reference velocity X", 0.0, -5.0, 5.0)
reference.add("reference_velocity_y", double_t, 0, "Reference velocity Y", 0.0, -5.0, 5.0)
reference.add("reference_velocity_z", double_t, 0, "Reference velocity Z", 0.0, -5.0, 5.0)
reference.add("reference_acceleration_x", double_t, 0, "Reference acceleration X", 0.0, -10.0, 10.0)
reference.add("reference_acceleration_y", double_t, 0, "Reference acceleration Y", 0.0, -10.0, 10.0)
reference.add("reference_acceleration_z", double_t, 0, "Reference acceleration Z", 0.0, -10.0, 10.0)
reference.add("reference_yaw", double_t, 0, "Reference yaw", 0.0, -3.1416, 3.1416)

topics = gen.add_group("Topics")
topics.add("topic_state", str_t, 0, "State topic", "/hummingbird/ground_truth/odometry")
topics.add("topic_motor", str_t, 0, "Motor topic", "/hummingbird/command/motor_speed")
topics.add("topic_reference", str_t, 0, "Reference topic", "/mpc_controller/setpoint")

node = gen.add_group("Node")
node.add("node_rate", double_t, 0, "Controller rate", 60.0, 10.0, 200.0)
node.add("node_log_interval", double_t, 0, "Log interval", 3.0, 0.1, 10.0)

exit(gen.generate(PACKAGE, "rotors_mpc_controller", "RotorsMPC"))
